{"version":3,"sources":["static-data.js","constants/action-types.js","actions/index.js","reducer/index.js","reducer/user.js","reducer/contacts.js","reducer/activeUserId.js","reducer/messages.js","reducer/typing.js","store/index.js","containers/User.js","components/Sidebar.js","components/Empty.js","components/Header.js","containers/Chats.js","containers/MessageInput.js","containers/ChatWindow.js","components/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["numberOfUsers","SET_ACTIVE_USER_ID","SET_TYPING_VALUE","SEND_MESSAGE","setActiveUserId","id","type","payload","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","Object","objectSpread","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","combineReducers","state","arguments","undefined","activeUserId","action","console","log","_action$payload","message","userId","allUserMsgs","keys","pop","defineProperty","typing","store","createStore","reducer","handleUserClick","_ref2","dispatch","User","_ref","react_default","a","createElement","className","onClick","bind","src","alt","Sidebar","map","contact","src_containers_User","key","Empty","first_name","split","Header","Chat","concat","Chats","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","ref","Chats_Chat","Component","handleSubmit","e","getState","preventDefault","MessageInput","value","onSubmit","onChange","target","placeholder","ChatWindow","activeUser","activeMessages","components_Header","src_containers_Chats","values","src_containers_MessageInput","Main","src_containers_ChatWindow","src_components_Empty","App","_store$getState","src_components_Sidebar","src_components_Main","Boolean","window","location","hostname","match","render","ReactDOM","src_containers_App","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdcb8eed.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\nexport const SEND_MESSAGE=\"SEND_MESSAGE\";","import {\n  SET_ACTIVE_USER_ID,\n  SET_TYPING_VALUE,\n  SEND_MESSAGE,\n} from '../constants/action-types';\n\nexport const setActiveUserId = id => ({\n  type: SET_ACTIVE_USER_ID,\n  payload: id,\n});\n\nexport const setTypingValue = value => ({\n  type: SET_TYPING_VALUE,\n  payload: value,\n});\n\nexport const sendMessage = (message, userId) => ({\n  type: SEND_MESSAGE,\n  payload: {\n    message,\n    userId,\n  },\n});\n","import { combineReducers } from 'redux';\n\nimport user from './user';\nimport contacts from './contacts';\nimport activeUserId from \"./activeUserId\";\nimport messages from \"./messages\";\nimport typing from \"./typing\";\n\nexport default combineReducers({\n  user,\n  contacts,\n  activeUserId,\n  messages,\n  typing,\n});\n","import { generateUser } from '../static-data';\n\nexport default function user(state = generateUser(), action) {\n  return state;\n}\n","import { contacts } from \"../static-data\";\n\nexport default (state = contacts, action)  => {\n  return state;\n};\n","import { SET_ACTIVE_USER_ID } from '../constants/action-types';\n\nexport default function activeUserId(state = null, action) {\n  switch (action.type) {\n    case SET_ACTIVE_USER_ID:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import { getMessages } from '../static-data';\nimport { SEND_MESSAGE } from '../constants/action-types';\nimport _ from 'lodash';\nexport default function messages(state = getMessages(10), action) {\n  switch (action.type) {\n    case SEND_MESSAGE:\n    console.log('action', action.payload);\n    \n      const { message, userId } = action.payload;\n      const allUserMsgs = state[userId];\n      const number = +_.keys(allUserMsgs).pop() + 1;\n      return {\n        ...state,\n        [userId]: {\n          ...allUserMsgs,\n          [number]: {\n            number,\n            text: message,\n            is_user_msg: true,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n}\n","import { SET_TYPING_VALUE, SEND_MESSAGE } from '../constants/action-types';\n\nexport default function typing(state = '', action) {\n  switch (action.type) {\n    case SET_TYPING_VALUE:\n      return action.payload;\n    case SEND_MESSAGE:\n      return \"\";  \n    default:\n      return state;\n  }\n}\n","import { createStore } from \"redux\";\nimport reducer from '../reducer';\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport './User.css';\nimport { setActiveUserId } from \"../actions\";\nimport store from \"../store\";\n\n\nconst User = ({ user }) => {\n  const { name, profile_pic, status } = user;\n  return (\n    <div className=\"User\" onClick={handleUserClick.bind(null, user)}>\n      <img src={profile_pic} alt={name} className=\"User__pic\" />\n      <div className=\"User__details\">\n        <p className=\"User__details-name\">{name}</p>\n        <p className=\"User__details-status\">{status}</p>\n      </div>\n    </div>\n  );\n};\n\nfunction handleUserClick({ user_id }) {\n  store.dispatch(setActiveUserId(user_id));\n}\n\nexport default User;\n","import React from \"react\";\nimport \"./Sidebar.css\";\nimport User from '../containers/User';\nconst Sidebar = ({contacts}) => {\n  return (\n  <aside className=\"Sidebar\">\n    {contacts.map((contact) => <User key={contact.user_id} user={contact} />)}  \n  </aside>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport \"./Empty.css\";\nconst Empty = ({ user }) => {\nconst { name, profile_pic, status } = user;\nconst first_name = name.split(\" \")[0];\nreturn ( <div className=\"Empty\">\n<h1 className=\"Empty__name\">Welcome, {first_name} </h1>\n<img src={profile_pic} alt={name} className=\"Empty__img\" />\n<p className=\"Empty__status\">\n<b>Status:</b> {status}\n</p>\n<button className=\"Empty__btn\">Start a conversation</button>\n<p className=\"Empty__info\">\nSearch for someone to start chatting with or go to Contacts\nto see who\nis available\n</p>\n</div>\n);\n};\nexport default Empty;","import React from 'react';\nimport './Header.css';\nfunction Header({ user }) {\n  const { name, status } = user;\n  return (\n    <header className=\"Header\">\n      <h1 className=\"Header__name\">{name}</h1>\n      <p className=\"Header__status\">{status}</p>\n    </header>\n  );\n}\n\nexport default Header;\n\n","import React, { Component } from 'react';\nimport './Chats.css';\nconst Chat = ({ message }) => {\n  const { text, is_user_msg } = message;\n  return (\n    <span className={`Chat ${is_user_msg ? 'is-user-msg' : ''}`}>{text}</span>\n  );\n};\nclass Chats extends Component {\n  constructor(props) {\n    super(props);\n    this.chatsRef = React.createRef();\n  }\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n  scrollToBottom = () => {\n    this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\n  };\n  render() {\n    return (\n      <div className=\"Chats\" ref={this.chatsRef}>\n        {this.props.messages.map(message => (\n          <Chat message={message} key={message.number} />\n        ))}\n      </div>\n    );\n  }\n}\nexport default Chats;\n","import React from 'react';\nimport store from '../store';\nimport { setTypingValue, sendMessage } from '../actions';\nimport './MessageInput.css';\nconst MessageInput = ({ value }) => {\n  const handleChange = e => {\n    store.dispatch(setTypingValue(e.target.value));\n  };\n  return (\n    <form className=\"Message\" onSubmit={handleSubmit}>\n      <input\n        className=\"Message__input\"\n        onChange={handleChange}\n        value={value}\n        placeholder=\"write a message\"\n      />\n    </form>\n  );\n};\n\nconst handleSubmit = e => {\n  const state = store.getState();\n  e.preventDefault();\n  const { typing, activeUserId } = state;\n\n  store.dispatch(sendMessage(typing, activeUserId));\n};\nexport default MessageInput;\n","import React from 'react';\nimport Header from '../components/Header';\nimport Chats from './Chats';\nimport MessageInput from './MessageInput';\nimport store from '../store';\nimport _ from 'lodash';\nimport './ChatWindow.css';\nconst ChatWindow = ({ activeUserId }) => {\n  const state = store.getState();\n  const activeUser = state.contacts[activeUserId];\n  const activeMessages = state.messages[activeUserId];\n  const {typing} = state;\n  console.log('activeUser', activeUser);\n  return (\n    <div className=\"ChatWindow\">\n     <Header user={activeUser} />\n     <Chats messages={_.values(activeMessages)} />\n     <MessageInput value={typing} />\n    </div>\n  );\n};\nexport default ChatWindow;\n","import React from \"react\";\nimport \"./Main.css\";\nimport Empty from './Empty';\nimport ChatWindow from \"../containers/ChatWindow\";\nconst Main = ({user, activeUserId}) => {\n  const renderMainContent = () => {\n    if(!activeUserId) {\n      return <Empty user={user} activeUserId={activeUserId} />;\n    } else {\n      return <ChatWindow activeUserId={activeUserId} />\n    }\n  };\n  return <main className=\"Main\">{renderMainContent()}</main>;\n};\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport Sidebar from '../components/Sidebar';\nimport Main from '../components/Main';\nimport store from '../store';\nimport _ from 'lodash';\nconst App = () => {\n  const { contacts, user, activeUserId } = store.getState();\n  return (  \n    <div className=\"App\">\n      <Sidebar contacts={_.values(contacts)}/>    \n      <Main user={user} activeUserId={activeUserId} />\n    </div>\n  );\n};\n    \nexport default App;    \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/containers/App';\nimport store from './store'\nimport * as serviceWorker from './serviceWorker';\n\nconst render = () => {\n  fancyLog();\n  return ReactDOM.render(<App />, document.getElementById('root'));\n}\nrender();\nstore.subscribe(render);\n\nfunction fancyLog() {\n  console.log(\"%c Rendered with 👉 👉 👇 \", \"background: purple;color: #fff\");\n  console.log(store.getState());\n  }\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}